"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1752],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,y=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(y,o(o({ref:t},p),{},{components:n})):r.createElement(y,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2938:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const i={},o="Two-way Encryption Mechanism",c={unversionedId:"RFCs/fula-sec/encryption",id:"RFCs/fula-sec/encryption",title:"Two-way Encryption Mechanism",description:"- Start Date: 2022-02-27",source:"@site/docs/RFCs/fula-sec/encryption.md",sourceDirName:"RFCs/fula-sec",slug:"/RFCs/fula-sec/encryption",permalink:"/RFCs/fula-sec/encryption",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Decentralized Identity (DID)",permalink:"/RFCs/fula-sec/did"},next:{title:"Private Network",permalink:"/RFCs/private-network"}},l=[{value:"Summary",id:"summary",children:[],level:2},{value:"Tagged Encryption",id:"tagged-encryption",children:[],level:2},{value:"Asymmetric Encryption",id:"asymmetric-encryption",children:[],level:2},{value:"References",id:"references",children:[],level:2}],s={toc:l};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"two-way-encryption-mechanism"},"Two-way Encryption Mechanism"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Start Date: 2022-02-27"),(0,a.kt)("li",{parentName:"ul"},"RFC PR: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/functionland/docs/pull/74"},"functionland/docs/pull/74")),(0,a.kt)("li",{parentName:"ul"},"Functionland Issue: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/functionland/docs/issues/65"},"functionland/docs/issues/65")),(0,a.kt)("li",{parentName:"ul"},"Status: Draft"),(0,a.kt)("li",{parentName:"ul"},"Authors: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/ruffiano89"},"Jamshid")),(0,a.kt)("li",{parentName:"ul"},"Reviewers: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/orgs/functionland/people/masih"},"Masih"),", ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/gitaaron"},"Aaron"))),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,"There are two scenarios that require encryption"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Tagged DID encryption"),(0,a.kt)("li",{parentName:"ol"},"Asymmetric Encryption - Encrypt the subscriber/audience's public key.")),(0,a.kt)("h2",{id:"tagged-encryption"},"Tagged Encryption"),(0,a.kt)("p",null," ",(0,a.kt)("strong",{parentName:"p"},"Encrypt data by adding a DID.")),(0,a.kt)("p",null,"Tagged encryption works according to the following steps:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Each agent must have a generated DID address.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Alice uses a unique symmetric key (sKn) for encrypting each piece of content and each file while streaming to the Box.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"After the file has been successfully stored to the IPFS node, it returns the CID for each encrypted file to Alice.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Alice now gives Bob access to the file by issuing him a ",(0,a.kt)("inlineCode",{parentName:"p"},"JWE Doc")," with BOB`s DID address, symmetric key (sK1) and CID")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Bob decrypts the document using his own DID address and then obtains the symmetric key (sK1) to get the file that belongs to Alice. As a result, BOB gets the CID and sends a request to the Box.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Bob decrypts the data with sK1 while streaming it from the Box."))),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{alt:"tagged-encryption",src:"https://raw.githubusercontent.com/functionland/docs/246391d247fb301351e483594037135d2b3e03d3/static/diagrams/tagged-encryption.svg"}),(0,a.kt)("p",{align:"center"},"Tagged Encryption Sequence Diagram")),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/functionland/fula/blob/fula-sec/libraries/fula-sec/readme.md#tagged-encryption-tagged-did"},"here")," for tagged encryption sample code."),(0,a.kt)("h1",{id:""}),(0,a.kt)("h2",{id:"asymmetric-encryption"},"Asymmetric Encryption"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"With assymetric encryption, no one needs to share DID identity with others, they just need to know a PubKey.")),(0,a.kt)("p",null,"Asymmetric Encryption works according to the following steps:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"First, each application must have a generated DID address and PublicKey.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Alice uses a unique symmetric key (sKn) for encrypting each piece of content and each file while streaming to the Box.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"After the file has been successfully stored to the IPFS node, it returns the CID for each encrypted file to Alice.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Alice now gives Bob access to the file by issuing him a ",(0,a.kt)("inlineCode",{parentName:"p"},"JWE Doc")," with BOB`s PubKey, symmetric key (sK1) and CID.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Bob decrypts the document using his own PrivateKey and then obtains the symmetric key (sK1) to get the file that belongs to Alice. As a result, BOB gets the CID and sends a request to the Box.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Bob decrypts data with sK1 while streaming it from the Box."))),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{alt:"Assymetric Encryption Sequence Diagram",src:"https://raw.githubusercontent.com/functionland/docs/246391d247fb301351e483594037135d2b3e03d3/static/diagrams/assymetric-encryption.svg"}),(0,a.kt)("p",{align:"center"},"Tagged Encryption Sequence Diagram")),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/functionland/fula/blob/fula-sec/libraries/fula-sec/readme.md#asymmetric-encryption"},"here")," for assymetric encryption sample code."),(0,a.kt)("h1",{id:"-1"}),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Public-key_cryptography#:~:text=In%20an%20asymmetric%20key%20encryption,become%20known%20to%20any%20other."},"Public-key cryptography"))))}p.isMDXComponent=!0}}]);