"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6208],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(t),h=r,m=p["".concat(c,".").concat(h)]||p[h]||d[h]||o;return t?a.createElement(m,i(i({ref:n},u),{},{components:t})):a.createElement(m,i({ref:n},u))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1283:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));const o={},i="Node API",l={unversionedId:"blockchain/Services/NodeAPI",id:"blockchain/Services/NodeAPI",title:"Node API",description:"Install OS dependencies and Rust",source:"@site/docs/blockchain/Services/NodeAPI.md",sourceDirName:"blockchain/Services",slug:"/blockchain/Services/NodeAPI",permalink:"/blockchain/Services/NodeAPI",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Run Node",permalink:"/blockchain/Services/RunNode"},next:{title:"Proof Engine",permalink:"/blockchain/Services/ProofEngine"}},c=[{value:"Install OS dependencies and Rust",id:"install-os-dependencies-and-rust",children:[],level:2},{value:"Clone the Node API",id:"clone-the-node-api",children:[],level:2},{value:"Run the Node API",id:"run-the-node-api",children:[],level:2},{value:"Install Docker",id:"install-docker",children:[],level:2},{value:"Build the image",id:"build-the-image",children:[],level:2},{value:"Edit the .env",id:"edit-the-env",children:[],level:2},{value:"Run the Node API",id:"run-the-node-api-1",children:[],level:2}],s={toc:c};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"node-api"},"Node API"),(0,r.kt)("h1",{id:"compile-from-source"},"Compile from Source"),(0,r.kt)("h2",{id:"install-os-dependencies-and-rust"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/functionland/sugarfunge-node/blob/main/docs/rust-setup.md"},"Install OS dependencies and Rust")),(0,r.kt)("h2",{id:"clone-the-node-api"},"Clone the Node API"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/functionland/sugarfunge-api.git\n")),(0,r.kt)("h2",{id:"run-the-node-api"},"Run the Node API"),(0,r.kt)("p",null,"Requires a ",(0,r.kt)("a",{parentName:"p",href:"/blockchain/Services/Node"},"Node")," running."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cargo run --release\n")),(0,r.kt)("h1",{id:"using-docker"},"Using Docker"),(0,r.kt)("h2",{id:"install-docker"},(0,r.kt)("a",{parentName:"h2",href:"https://docs.docker.com/engine/install/"},"Install Docker")),(0,r.kt)("h2",{id:"build-the-image"},"Build the image"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker build -t sugarfunge-api:local -f docker/Dockerfile .\n")),(0,r.kt)("h2",{id:"edit-the-env"},"Edit the .env"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano .ev.example\n")),(0,r.kt)("p",null,"Save it and then:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo mv .env.example /var/lib/.sugarfunge-node/.env\n")),(0,r.kt)("h2",{id:"run-the-node-api-1"},"Run the Node API"),(0,r.kt)("p",null,"Requires a ",(0,r.kt)("a",{parentName:"p",href:"/blockchain/Services/Node"},"Node")," running."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --rm -d --name MyNode03API --network host -v /var/lib/.sugarfunge-node/.env:/.env -v /var/lib/.sugarfunge-node/data/node03:/data sugarfunge-api:local --db-uri=/data --node-server ws://127.0.0.1:9946\n")),(0,r.kt)("h1",{id:"available-arguments"},"Available arguments"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sugarfunge-api 0.1.0\n\nUSAGE:\n    sugarfunge-api [OPTIONS]\n\nFLAGS:\n    -h, --help       Prints help information\n    -V, --version    Prints version information\n\nOPTIONS:\n    -d, --db-uri <db>                  \n    -l, --listen <listen>               [default: http://127.0.0.1:4000]\n    -s, --node-server <node-server>     [default: ws://127.0.0.1:9944]\n")),(0,r.kt)("h1",{id:"subscriptions"},"Subscriptions"),(0,r.kt)("p",null,"Basic support for WebSockets subscriptions is available. Any tool that offers features for WebSockets connections and subscriptions will apply. For example, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/vi/websocat"},"websocat")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"websocat ws://127.0.0.1:4000/ws\n")),(0,r.kt)("h1",{id:"api-metadata-generation"},"API Metadata Generation"),(0,r.kt)("p",null,"If you update the ",(0,r.kt)("a",{parentName:"p",href:"/blockchain/Services/Node"},"Node")," manually, it's required to generate the metadata with the SugarFunge fork of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SugarFunge/subxt"},"subxt")," to access the new state of the chain using the API."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"subxt-cli metadata -f bytes > sugarfunge_metadata.scale\n")))}u.isMDXComponent=!0}}]);