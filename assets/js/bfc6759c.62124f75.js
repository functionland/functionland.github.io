"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[505],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=i.createContext({}),c=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=c(e.components);return i.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(t),f=r,h=d["".concat(p,".").concat(f)]||d[f]||u[f]||a;return t?i.createElement(h,o(o({ref:n},s),{},{components:t})):i.createElement(h,o({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<a;c++)o[c]=t[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3211:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var i=t(7462),r=(t(7294),t(3905));const a={title:"IPFS Pinning Service API",id:"ipfs-pinning-service-api",slug:"ipfs-pinning-service-api",excerpt:"",hidden:!1,createdAt:"Fri JUN 28 2024 15:02:42 GMT+0000 (Coordinated Universal Time)",updatedAt:"Fri JUN 28 2024 18:39:16 GMT+0000 (Coordinated Universal Time)"},o=void 0,l={unversionedId:"pinning-service/ipfs-pinning-service-api",id:"pinning-service/ipfs-pinning-service-api",title:"IPFS Pinning Service API",description:"Not to be confused with the Fula API, the Pinning Service API allows you to create a link between your local IPFS node and Functionland Fula Network",source:"@site/docs/pinning-service/ipfs-pinning-service-api.md",sourceDirName:"pinning-service",slug:"/pinning-service/ipfs-pinning-service-api",permalink:"/pinning-service/ipfs-pinning-service-api",tags:[],version:"current",frontMatter:{title:"IPFS Pinning Service API",id:"ipfs-pinning-service-api",slug:"ipfs-pinning-service-api",excerpt:"",hidden:!1,createdAt:"Fri JUN 28 2024 15:02:42 GMT+0000 (Coordinated Universal Time)",updatedAt:"Fri JUN 28 2024 18:39:16 GMT+0000 (Coordinated Universal Time)"},sidebar:"tutorialSidebar",previous:{title:"Welcome",permalink:"/pinning-service/"},next:{title:"Fula API",permalink:"/api-intro"}},p=[{value:"IPFS Pinning Services API Spec Compatibility",id:"ipfs-pinning-services-api-spec-compatibility",children:[{value:"Introduction",id:"introduction",children:[],level:3},{value:"Endpoints",id:"endpoints",children:[],level:3},{value:"Authentication",id:"authentication",children:[],level:3},{value:"Configuring Functionland Fula in the IPFS CLI",id:"configuring-functionland-fula-in-the-ipfs-cli",children:[],level:3}],level:2}],c=(s="Note",function(e){return console.warn("Component "+s+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var s;const u={toc:p};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(c,{mdxType:"Note"},"Not to be confused with the Fula API, the Pinning Service API allows you to create a link between your local IPFS node and Functionland Fula Network"),(0,r.kt)("h2",{id:"ipfs-pinning-services-api-spec-compatibility"},"IPFS Pinning Services API Spec Compatibility"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://ipfs.github.io/pinning-services-api-spec/"},"IPFS Pinning Services API Spec")," is a standardized specification for developers building on top of IPFS that allows an application to integrate a pinning service without needing to learn that pinning service's unique API. "),(0,r.kt)("h3",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Functionland Fula network is the only available true decentralized network for pinning ipfs data. It currently includes 900 globally distributed nodes. These nodes are individually owned and are rewarded using Fula blockchain based on the storage they provide. Since it is an open network, anyone can join and start providing the service and earns. For more information please visit ",(0,r.kt)("a",{parentName:"p",href:"https://fx.land"},"https://fx.land")),(0,r.kt)("img",{style:{width:"100%",borderRadius:"0.5rem"},src:"https://fx.land/igg%20sales%20map.png"}),(0,r.kt)("h3",{id:"endpoints"},"Endpoints"),(0,r.kt)("p",null,"Functionland Fula users looking to utilize the IPFS Pinning Services API can do so from our dedicated API endpoint:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"https://api.cloud.fx.land")),(0,r.kt)("h3",{id:"authentication"},"Authentication"),(0,r.kt)("p",null,"To authenticate with Functionland through the Pinning Services API spec, you'll first need to have an ",(0,r.kt)("inlineCode",{parentName:"p"},"accessToken"),". You can create this API token on the ",(0,r.kt)("a",{parentName:"p",href:"https://cloud.fx.land/"},"Fula Keys Page")," (Invite-Only as of this date)"),(0,r.kt)("p",null,"When you create a new API key, you'll need to take note of the JWT (",(0,r.kt)("a",{parentName:"p",href:"https://jwt.io/"},"JSON Web Token"),") token that's shown to you immediately after creation. This JWT is specific to the API key and shares the same permissions."),(0,r.kt)("p",null,"If you ever revoke the API key for this JWT, this JWT will no longer be valid for authenticating to the Pinning Services API."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Configuring Functionland Fula in the IPFS Desktop App")),(0,r.kt)("p",null,"If you are running the IPFS desktop app, you can configure your pinning service of choice within the user interface. To do so, open the app, go to your Preferences, then click Add Service: "),(0,r.kt)("img",{style:{width:"100%",borderRadius:"0.5rem"},src:"https://bafybeidvzrjgjigmagzlan77hzpqbxpdc3ixount6v4y3ojcbja3e2ol3a.ipfs.dweb.link/"}),(0,r.kt)("p",null,"Select Functionland as the pinning service, and then configure with your secret access token (JWT): "),(0,r.kt)("p",null,"From there you can upload files and have the option to pin locally as well as remotely to Functionland Fula network! "),(0,r.kt)("h3",{id:"configuring-functionland-fula-in-the-ipfs-cli"},"Configuring Functionland Fula in the IPFS CLI"),(0,r.kt)("p",null,"You can also pin to Functionland Fula directly from the IPFS CLI using the ",(0,r.kt)("inlineCode",{parentName:"p"},"ipfs")," command."),(0,r.kt)("p",null,"To add Functionland Fula credentials, use the following command (where YOUR","_","JWT is the JWT token described in the \u201cAuthentication\u201d section above):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ipfs pin remote service add functionland https://api.cloud.fx.land YOUR_JWT\n")),(0,r.kt)("p",null,"To pin a CID to Functionland Fula under a human-readable name:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ipfs pin remote add --service=functionland --name=war-and-peace.txt bafybeib32tuqzs2wrc52rdt56cz73sqe3qu2deqdudssspnu4gbezmhig4\n")),(0,r.kt)("p",null,"To list successful pins:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ipfs pin remote ls --service=functionland\n")),(0,r.kt)("p",null,"To list pending pins:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ipfs pin remote ls --service=functionland --status=queued,pinning,failed\n")),(0,r.kt)("p",null,"For more commands and general help:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ipfs pin remote --help\n")))}d.isMDXComponent=!0}}]);