"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[616,369],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(n),m=i,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||a;return n?r.createElement(f,l(l({ref:t},d),{},{components:n})):r.createElement(f,l({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6642:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return u},default:function(){return m}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),l=n(5681),o=["components"],s={title:"File API",id:"file-api"},c="File API (Object Store)",d={unversionedId:"api/file-api",id:"api/file-api",title:"File API",description:"File API provides an interface-like object store for you to upload files and streams (eg. photos, videos or any type of document) and efficiently retrieve them for use in your web/mobile DApp.",source:"@site/docs/api/file.md",sourceDirName:"api",slug:"/api/file-api",permalink:"/api/file-api",tags:[],version:"current",frontMatter:{title:"File API",id:"file-api"},sidebar:"tutorialSidebar",previous:{title:"Graph API",permalink:"/api/graph-api"},next:{title:"Whitepaper",permalink:"/whitepaper/"}},u=[{value:"Upload",id:"upload",children:[{value:"SendFile",id:"sendfile",children:[{value:"Example",id:"example",children:[],level:4}],level:3},{value:"sendStreamFile",id:"sendstreamfile",children:[{value:"Example",id:"example-1",children:[],level:4}],level:3}],level:2},{value:"Download",id:"download",children:[{value:"receiveFile",id:"receivefile",children:[{value:"Example",id:"example-2",children:[],level:4}],level:3},{value:"receiveMeta",id:"receivemeta",children:[{value:"Example",id:"example-3",children:[],level:4}],level:3},{value:"receiveStreamFile",id:"receivestreamfile",children:[{value:"Example",id:"example-4",children:[],level:4}],level:3}],level:2}],p={toc:u};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"file-api-object-store"},"File API (Object Store)"),(0,a.kt)("p",null,"File API provides an interface-like object store for you to upload files and streams (eg. photos, videos or any type of document) and efficiently retrieve them for use in your web/mobile DApp."),(0,a.kt)("p",null,"File protocol is based on object stores.  When you upload something, a ",(0,a.kt)("a",{parentName:"p",href:"https://docs.ipfs.io/concepts/content-addressing/"},"CID")," is created and returned to you and the file gets stored in an IPFS compatible datastore."),(0,a.kt)("h2",{id:"upload"},"Upload"),(0,a.kt)("h3",{id:"sendfile"},"SendFile"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"sendFile(File) => Promise<FileId>")," ",(0,a.kt)("br",null)),(0,a.kt)("p",null,"sendFile will take a ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/File"},"File")," as an argument and return a Promise.  If the upload completes successfully, a Promise will return a ",(0,a.kt)("inlineCode",{parentName:"p"},"FileId")," that is a string\nrepresenting the CID of uploaded content. "),(0,a.kt)("h4",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import {Fula, createClient} from '@functionland/fula';\n\nconst fulaClient = await createClient();\nawait fulaClient.connect(serverId);\n...\nconst selectedFile = document.getElementById('input').files[0];\nconst id = await fulaClient.sendFile(selectedFile);\n")),(0,a.kt)("h3",{id:"sendstreamfile"},"sendStreamFile"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"sendStreamFile(source, meta) => Promise<FileId>")," ",(0,a.kt)("br",null)),(0,a.kt)("p",null,"sendStreamFile will take a source and meta  as argument and return a Promise.  If upload is done successfully, a Promise will return a ",(0,a.kt)("inlineCode",{parentName:"p"},"FileId")," that is a string\nrepresenting the CID of uploaded content.  (This is useful when you're working with stream or outside the browser.)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"source:  ",(0,a.kt)("inlineCode",{parentName:"li"},"AsyncIterable<Uint8Array>")),(0,a.kt)("li",{parentName:"ul"},"meta: ",(0,a.kt)("inlineCode",{parentName:"li"},"{name,type,lastModified,size}"))),(0,a.kt)("h4",{id:"example-1"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import {Fula, createClient} from '@functionland/fula';\n\nconst fulaClient = await createClient();\nawait fulaClient.connect(serverId);\n...\nexport async function* fileToAsyncItrable(file:File) {\n    const reader = (file.stream()).getReader();\n    while (true) {\n        const {value, done} = await reader.read();\n        if (done) {\n            break;\n        }\n        yield value;\n    }\n}\nconst selectedFile = document.getElementById('input').files[0];\nconst id = await fulaClient.sendStreamFile(fileToAsyncItrable(selectedFile),\n    {\n        name: selectedFile.name,\n        type: selectedFile.type,\n        size: selectedFile.size,\n        lastModified: selectedFile.lastModified\n    });\n")),(0,a.kt)("h2",{id:"download"},"Download"),(0,a.kt)("h3",{id:"receivefile"},"receiveFile"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"(fileId: FileId) => Promise<File>"),(0,a.kt)("br",null)),(0,a.kt)("p",null,"receiveFile will take FileId and return Promise. if file retrieved  successfully Promise return a ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/File"},"File")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"fileId:  ",(0,a.kt)("inlineCode",{parentName:"li"},"FileId"))),(0,a.kt)("h4",{id:"example-2"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import {Fula, createClient} from '@functionland/fula';\n\nconst fulaClient = await createClient();\nawait fulaClient.connect(serverId);\n...\nconst data = await fulaClient.receiveFile(fileId);\n\n")),(0,a.kt)("h3",{id:"receivemeta"},"receiveMeta"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"(fileId: FileId) => Promise<Meta>"),(0,a.kt)("br",null)),(0,a.kt)("p",null,"receiveMeta will take FileId and return Promise. if meta for the file retrieved successfully Promise return a ",(0,a.kt)("inlineCode",{parentName:"p"},"Meta")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"fileId:  ",(0,a.kt)("inlineCode",{parentName:"li"},"FileId"))),(0,a.kt)("h4",{id:"example-3"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import {Fula, createClient} from '@functionland/fula';\n\nconst fulaClient = await createClient();\nawait fulaClient.connect(serverId);\n...\nconst {name, type, size, lastModified} = await fulaClient.receiveMeta(fileId);\n\n")),(0,a.kt)("h3",{id:"receivestreamfile"},"receiveStreamFile"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"(fileId: FileId) => Promise<{ source: AsyncIterable<Uint8Array>, meta: Meta }>")," ",(0,a.kt)("br",null)),(0,a.kt)("p",null,"receiveStreamFile will take FileId and return a Promise.  If the FileId exists, a Promise will return a ",(0,a.kt)("inlineCode",{parentName:"p"},"{ source: AsyncIterable<Uint8Array>, meta: Meta }")),(0,a.kt)("p",null,"That source is a stream of content of the file and Meta is the ",(0,a.kt)("inlineCode",{parentName:"p"},"Meta"),".  (This is useful when you're working with a stream or outside of the browser.)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"fileId:  ",(0,a.kt)("inlineCode",{parentName:"li"},"FileId"))),(0,a.kt)("h4",{id:"example-4"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import {Fula, createClient} from '@functionland/fula';\n\nconst fulaClient = await createClient();\nawait fulaClient.connect(serverId);\n...\nconst {source, meta} = await fulaClient.receiveStreamFile(fileId);\nconst {name, type, size, lastModified} = meta;\nconst content: Array<Uint8Array> = [];\nfor await (const chunk of source) {\n    content.push(Uint8Array.from(chunk));\n}\nconst blob = new Blob(content, {type})\n\n\n")),(0,a.kt)(l.default,{mdxType:"WorkInProgress"}))}m.isMDXComponent=!0},5681:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return d},default:function(){return p}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),l=["components"],o={},s=void 0,c={unversionedId:"components/WorkInProgress",id:"components/WorkInProgress",title:"WorkInProgress",description:"Please note: these instructions remain a work in progress as we continue to evolve, refine and perfect the Fula API.  Make sure to check back soon for more details!",source:"@site/docs/components/WorkInProgress.mdx",sourceDirName:"components",slug:"/components/WorkInProgress",permalink:"/components/WorkInProgress",tags:[],version:"current",frontMatter:{}},d=[],u={toc:d};function p(e){var t=e.components,n=(0,i.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"WIP Alert")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Please note: these instructions remain a work in progress as we continue to evolve, refine and perfect the Fula API.  Make sure to check back soon for more details!"))))}p.isMDXComponent=!0}}]);