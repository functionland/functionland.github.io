"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2212],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=r.createContext({}),i=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},l=function(e){var n=i(e.components);return r.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=i(t),f=a,h=p["".concat(d,".").concat(f)]||p[f]||u[f]||o;return t?r.createElement(h,c(c({ref:n},l),{},{components:t})):r.createElement(h,c({ref:n},l))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=p;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var i=2;i<o;i++)c[i]=t[i];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6005:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return d},metadata:function(){return i},toc:function(){return l},default:function(){return p}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),c=["components"],s={},d=void 0,i={unversionedId:"blockchain/Services/RunValidators",id:"blockchain/Services/RunValidators",title:"RunValidators",description:"A minimum of two validator nodes is required for the network to run.",source:"@site/docs/blockchain/Services/RunValidators.md",sourceDirName:"blockchain/Services",slug:"/blockchain/Services/RunValidators",permalink:"/blockchain/Services/RunValidators",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"BuildNode",permalink:"/blockchain/Services/BuildNode"},next:{title:"Node API",permalink:"/blockchain/Services/NodeAPI"}},l=[],u={toc:l};function p(e){var n=e.components,s=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},u,s,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A minimum of two validator nodes is required for the network to run."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Requires a ",(0,o.kt)("a",{parentName:"li",href:"BuildNode"},"Build")," .")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"RUN TESNET VALIDATORS"),(0,o.kt)("p",null,"1) CREATION OF THE KEYS OF EACH VALIDATOR ACCOUNT"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'a) Generate the Aura Account\n\n./target/release/sugarfunge-node key generate --scheme Sr25519 \u2013password-interactive\n\nSecret phrase:     toe dust enhance uncover version polar ugly person sunset wrist swamp lawsuit\nNetwork ID:        substrate\nSecret seed:       0xf8a168f8d987dde4d48e055068f480ba64950173c9f58826effc3b7d9c699fb7\nPublic key (hex):  0x9cea935ffd8f8e72de04a1022e94fb80fc1e4c56e724e83cc995017f8735d40b\nAccount ID:        0x9cea935ffd8f8e72de04a1022e94fb80fc1e4c56e724e83cc995017f8735d40b\nPublic key (SS58): 5FcT1aGqnzvkq3gtp65CKz2qRBUTSUxUrmWkqAF8o9MCLHV1\nSS58 Address:      5FcT1aGqnzvkq3gtp65CKz2qRBUTSUxUrmWkqAF8o9MCLHV1\n\nb) Generate the Grandpa Account using the secret phrase of the Aura Account\n\n./target/release/sugarfunge-node key inspect --password-interactive --scheme Ed25519 "spider rose click hurt chapter infant guard roof spoon alpha area nominee"\n\nSecret phrase:     toe dust enhance uncover version polar ugly person sunset wrist swamp lawsuit\nNetwork ID:        substrate\nSecret seed:       0xf8a168f8d987dde4d48e055068f480ba64950173c9f58826effc3b7d9c699fb7\nPublic key (hex):  0x629b9993ff8409b7a554e73272fd34fc8710a7ab7cc3a139850a283d1a451669\nAccount ID:        0x629b9993ff8409b7a554e73272fd34fc8710a7ab7cc3a139850a283d1a451669\nPublic key (SS58): 5EHzmmawH9HJPF6cEWeTcBLv8wHW43XUaVgypX462q8T1fbT\nSS58 Address:      5EHzmmawH9HJPF6cEWeTcBLv8wHW43XUaVgypX462q8T1fbT\n')),(0,o.kt)("p",null,"2) GENERATE THE NODE-KEY AND PEER-ID FOR EACH VALIDATOR ACCOUNT"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'a) Generate a random node key and peer-id \n\n./target/release/sugarfunge-node key generate-node-key\n\nPeer-id: 12D3KooWC9nU1QzG8m3dZKSNqssmasdupLPhgu9adYe1h4ToBW7r\nkey: 4ac42a38b622dd9943c49ca9300000236406d35a43f0ce82eef556c1d81a4157\n\nb) Save the key as a file\n\necho -n "4ac42a38b622dd9943c49ca9300000236406d35a43f0ce82eef556c1d81a4157" > user-one-key\n\nc) Verify that the peer-id is correct using the node-key stored \n\n./target/release/sugarfunge-node key inspect-node-key --file user-one-key\n')),(0,o.kt)("p",null,"3) CREATION OF CHAINSPECS AND CHAINSPECSRAW"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"a) Before generating the CustomSpec.json, in the file node/src/chain_specs add the Peer-id of each of the validators in the node_authorization of the Genesis Config\n")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Replacing Peer-id in the file",src:t(5921).Z,width:"722",height:"582"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"b) Generate the CustomSpec.json\n\n    ./target/release/sugarfunge-node build-spec --disable-default-bootnode --chain local > customSpec.json\n\nc) Make the necessary changes if desired: \n\nChange the default account of Alice and Bob for Custom Accounts\n")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Changing default accounts",src:t(7186).Z,width:"405",height:"615"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"d) Once the changes to the CustomSpec.json have been made, generate the CustomSpecRaw.json\n\n    ./target/release/sugarfunge-node build-spec --chain=customSpec.json --raw --disable-default-bootnode > customSpecRaw.json\n")),(0,o.kt)("p",null,"4) ADD THE KEYS TO THE KEYSTORE FOR EACH VALIDATOR: This is made so the Accounts can import and finished blocks if not added the accounts won't produce them"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"a) Add the Aura Key:\n")),(0,o.kt)("p",null,' \t\t./target/release/sugarfunge-node key insert --base-path=.tmp/node01 --chain customSpecRaw.json --scheme Sr25519 --suri "toe dust enhance uncover version polar ugly person sunset wrist swamp lawsuit" --password-interactive --key-type aura'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    b) Add the Grandpa Key:\n    \n        ./target/release/sugarfunge-node key insert --base-path=.tmp/node01 --chain customSpecRaw.json --scheme Ed25519 --suri "toe dust enhance uncover version polar ugly person sunset wrist swamp lawsuit" --password-interactive --key-type gran\n')),(0,o.kt)("p",null,"Note: For other validators the following fields should be change accordingly:\n--base-path= .temp/node02\n--suri \u201c the corresponding secret phrase\u201d"),(0,o.kt)("p",null,"5) COMMANDS TO START THE NODES"),(0,o.kt)("p",null,"a) For the main validator node execute:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cargo run --release -- --chain ./customSpecRaw.json --enable-offchain-indexing true --base-path=.tmp/node01 --port=30334 --ws-port 9944 --ws-external --rpc-cors=all --rpc-methods=Unsafe --rpc-external --validator --name MyNode01 --password-interactive --node-key=4ac42a38b622dd9943c49ca9300000236406d35a43f0ce82eef556c1d81a4157\n")),(0,o.kt)("p",null,"b) For the rest of validator nodes execute:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cargo run --release -- --chain ./customSpecRaw.json --enable-offchain-indexing true --base-path=.tmp/node02 --port=30335 --ws-port 9945 --ws-external --rpc-cors=all --rpc-methods=Unsafe --rpc-external --bootnodes /ip4/127.0.0.1/tcp/30334/p2p/12D3KooWC9nU1QzG8m3dZKSNqssmasdupLPhgu9adYe1h4ToBW7r --validator --name MyNode02 --password-interactive --node-key=5ed89682d5d0d2efd35f98a248b97cc1f6155e6af169719f3d54900d34a98a4a\n")),(0,o.kt)("p",null,"c) For the a node to listen to the validator nodes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cargo run --release -- --chain ./customSpecRaw.json --enable-offchain-indexing true --base-path=.tmp/node03 --port=30336 --ws-port 9946 --ws-external --rpc-cors=all --rpc-methods=Unsafe --rpc-external --name MyNode03 --node-key=239afb9dae01b5c010c454f1e1df64ce83b3e13803540df079677860a745d168 --offchain-worker always\n")),(0,o.kt)("p",null,"Note: For each of the commands the following fields should be change accordingly:\n--base-path = .temp/node02 or .temp/node03\n--port = To a port not used in other commands\n--ws-port = To a port not used in other commands\n--bootnodes = Update the last segment value to the peer-id of the main validator obtained in step 2\n--name = to the given name\n--node-key with the node key values obtained in step 2 for each account"))}p.isMDXComponent=!0},5921:function(e,n,t){n.Z=t.p+"assets/images/validatorNode1-0a35cba37e32b7adf66a2ead3dd0185a.png"},7186:function(e,n,t){n.Z=t.p+"assets/images/validatorNode2-32750edd686d26b8bdf614c10b64f13d.png"}}]);