"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5006],{3905:function(e,t,l){l.d(t,{Zo:function(){return u},kt:function(){return m}});var n=l(7294);function a(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function i(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,n)}return l}function o(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?i(Object(l),!0).forEach((function(t){a(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):i(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function r(e,t){if(null==e)return{};var l,n,a=function(e,t){if(null==e)return{};var l,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)l=i[n],t.indexOf(l)>=0||(a[l]=e[l]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)l=i[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(a[l]=e[l])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),l=t;return e&&(l="function"==typeof e?e(t):o(o({},t),e)),l},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var l=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),c=s(l),m=a,h=c["".concat(p,".").concat(m)]||c[m]||d[m]||i;return l?n.createElement(h,o(o({ref:t},u),{},{components:l})):n.createElement(h,o({ref:t},u))}));function m(e,t){var l=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=l.length,o=new Array(i);o[0]=c;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:a,o[1]=r;for(var s=2;s<i;s++)o[s]=l[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,l)}c.displayName="MDXCreateElement"},7550:function(e,t,l){l.r(t),l.d(t,{frontMatter:function(){return r},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return c}});var n=l(7462),a=l(3366),i=(l(7294),l(3905)),o=["components"],r={},p="Manifest",s={unversionedId:"blockchain/Recipes/Manifest",id:"blockchain/Recipes/Manifest",title:"Manifest",description:"Upload Manifest",source:"@site/docs/blockchain/Recipes/Manifest.md",sourceDirName:"blockchain/Recipes",slug:"/blockchain/Recipes/Manifest",permalink:"/blockchain/Recipes/Manifest",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Claims",permalink:"/blockchain/Recipes/Claims"},next:{title:"Market",permalink:"/blockchain/Recipes/Market"}},u=[{value:"Upload Manifest",id:"upload-manifest",children:[{value:"Description:",id:"description",children:[],level:3},{value:"Previous Steps:",id:"previous-steps",children:[],level:3},{value:"Steps:",id:"steps",children:[],level:3},{value:"Example Input:",id:"example-input",children:[],level:3},{value:"Example Output:",id:"example-output",children:[],level:3}],level:2},{value:"Batch Upload Manifest",id:"batch-upload-manifest",children:[{value:"Description:",id:"description-1",children:[],level:3},{value:"Previous Steps:",id:"previous-steps-1",children:[],level:3},{value:"Steps:",id:"steps-1",children:[],level:3},{value:"Example Input:",id:"example-input-1",children:[],level:3},{value:"Example Output:",id:"example-output-1",children:[],level:3}],level:2},{value:"Store Manifest",id:"store-manifest",children:[{value:"Description:",id:"description-2",children:[],level:3},{value:"Previous Steps:",id:"previous-steps-2",children:[],level:3},{value:"Steps:",id:"steps-2",children:[],level:3},{value:"Example Input:",id:"example-input-2",children:[],level:3},{value:"Example Output:",id:"example-output-2",children:[],level:3}],level:2},{value:"Batch Store Manifest",id:"batch-store-manifest",children:[{value:"Description:",id:"description-3",children:[],level:3},{value:"Previous Steps:",id:"previous-steps-3",children:[],level:3},{value:"Steps:",id:"steps-3",children:[],level:3},{value:"Example Input:",id:"example-input-3",children:[],level:3},{value:"Example Output:",id:"example-output-3",children:[],level:3}],level:2},{value:"<strong>Get Available</strong>",id:"get-available",children:[{value:"Description:",id:"description-4",children:[],level:3},{value:"Previous Steps:",id:"previous-steps-4",children:[],level:3},{value:"Steps:",id:"steps-4",children:[],level:3},{value:"Example Input:",id:"example-input-4",children:[],level:3},{value:"Example Output:",id:"example-output-4",children:[],level:3}],level:2},{value:"<strong>Get All</strong>",id:"get-all",children:[{value:"Description:",id:"description-5",children:[],level:3},{value:"Previous Steps:",id:"previous-steps-5",children:[],level:3},{value:"Steps:",id:"steps-5",children:[],level:3},{value:"Example Input:",id:"example-input-5",children:[],level:3},{value:"Example Output:",id:"example-output-5",children:[],level:3}],level:2},{value:"<strong>Remove</strong>",id:"remove",children:[{value:"Description:",id:"description-6",children:[],level:3},{value:"Previous Steps:",id:"previous-steps-6",children:[],level:3},{value:"Steps:",id:"steps-6",children:[],level:3},{value:"Example Input:",id:"example-input-6",children:[],level:3},{value:"Example Output:",id:"example-output-6",children:[],level:3}],level:2},{value:"Batch <strong>Remove</strong>",id:"batch-remove",children:[{value:"Description:",id:"description-7",children:[],level:3},{value:"Previous Steps:",id:"previous-steps-7",children:[],level:3},{value:"Steps:",id:"steps-7",children:[],level:3},{value:"Example Input:",id:"example-input-7",children:[],level:3},{value:"Example Output:",id:"example-output-7",children:[],level:3}],level:2},{value:"<strong>Remove Stored Manifest</strong>",id:"remove-stored-manifest",children:[{value:"Description:",id:"description-8",children:[],level:3},{value:"Previous Steps:",id:"previous-steps-8",children:[],level:3},{value:"Steps:",id:"steps-8",children:[],level:3},{value:"Example Input:",id:"example-input-8",children:[],level:3},{value:"Example Output:",id:"example-output-8",children:[],level:3}],level:2},{value:"Batch <strong>Remove Stored Manifest</strong>",id:"batch-remove-stored-manifest",children:[{value:"Description:",id:"description-9",children:[],level:3},{value:"Previous Steps:",id:"previous-steps-9",children:[],level:3},{value:"Steps:",id:"steps-9",children:[],level:3},{value:"Example Input:",id:"example-input-9",children:[],level:3},{value:"Example Output:",id:"example-output-9",children:[],level:3}],level:2}],d={toc:u};function c(e){var t=e.components,l=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"manifest"},"Manifest"),(0,i.kt)("h2",{id:"upload-manifest"},"Upload Manifest"),(0,i.kt)("h3",{id:"description"},"Description:"),(0,i.kt)("p",null,"Allows the user to upload a manifest to the chain so it's available to be stored."),(0,i.kt)("h3",{id:"previous-steps"},"Previous Steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Upload the file on IPFS and copy the file CID.")),(0,i.kt)("h3",{id:"steps"},"Steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Call the manifest/upload endpoint with the following request body:")),(0,i.kt)("h3",{id:"example-input"},"Example Input:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n    "seed": "//Alice",\n    "pool_id": 1,\n    "cid": "CIDTest1",\n    "replication_factor":2,\n    "manifest_metadata": {\n        "job": {\n            "work": "Storage",\n            "engine": "IPFS",\n            "uri": "CIDTest1"\n        }\n    }\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"seed: the seed of the account uploader."),(0,i.kt)("li",{parentName:"ul"},"replication_factor: the amount of times that file can be replicated."),(0,i.kt)("li",{parentName:"ul"},"pool_id: the pool identifier where the file its going to be uploaded."),(0,i.kt)("li",{parentName:"ul"},"manifest_metadata: the corresponding metadata of the manifest being uploaded.")),(0,i.kt)("h3",{id:"example-output"},"Example Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n   "uploader": "5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY",\n   "storage": [],\n   "manifest_metadata": {\n       "job": {\n           "engine": "IPFS",\n           "uri": "CIDTest1",\n           "work": "Storage"\n       }\n   },\n   "pool_id": 1\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"uploader: the account of the file uploader."),(0,i.kt)("li",{parentName:"ul"},"storage: the accounts that are storing the file currently (initialized as empty)."),(0,i.kt)("li",{parentName:"ul"},"manifest_metadata: the corresponding metadata of the manifest uploaded."),(0,i.kt)("li",{parentName:"ul"},"pool_id: the pool identifier where the file its going to be uploaded.")),(0,i.kt)("h2",{id:"batch-upload-manifest"},"Batch Upload Manifest"),(0,i.kt)("h3",{id:"description-1"},"Description:"),(0,i.kt)("p",null,"Allows the user to upload multiple manifest to the chain so they\u2019re available to be stored."),(0,i.kt)("h3",{id:"previous-steps-1"},"Previous Steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Upload the files on IPFS and copy the file CIDs.")),(0,i.kt)("h3",{id:"steps-1"},"Steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Call the manifest/batch_upload endpoint with the following request body:")),(0,i.kt)("h3",{id:"example-input-1"},"Example Input:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n    "seed": "//Alice",\n    "pool_id": [1,1],\n    "cid":["CIDTest2", "CIDTest3"],\n    "replication_factor": [2,3],\n    "manifest_metadata": [{\n        "job": {\n            "work": "Storage",\n            "engine": "IPFS",\n            "uri": "CIDTest1"\n        }\n    },{\n        "job": {\n            "work": "Storage",\n            "engine": "IPFS",\n            "uri": "CIDTest2"\n        }\n    }]\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"seed: the seed of the account uploader."),(0,i.kt)("li",{parentName:"ul"},"replication_factor: the amount of times that file can be replicated."),(0,i.kt)("li",{parentName:"ul"},"pool_id: the pool identifier where the file its going to be uploaded."),(0,i.kt)("li",{parentName:"ul"},"manifest_metadata: the corresponding metadata of the manifest being uploaded.")),(0,i.kt)("h3",{id:"example-output-1"},"Example Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n    "uploader": "5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY",\n    "pool_id": [1,1],\n    "manifest_metadata": [\n        {\n            "job": {\n                "engine": "IPFS",\n                "uri": "CIDTest1",\n                "work": "Storage"\n            }\n        },\n        {\n            "job": {\n                "engine": "IPFS",\n                "uri": "CIDTest2",\n                "work": "Storage"\n            }\n        }\n    ]\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"uploader: the account of the file uploader."),(0,i.kt)("li",{parentName:"ul"},"manifest_metadata: the corresponding array of metadata of the manifests uploaded."),(0,i.kt)("li",{parentName:"ul"},"pool_id: the array of pool identifiers where the file its going to be uploaded.")),(0,i.kt)("h2",{id:"store-manifest"},"Store Manifest"),(0,i.kt)("h3",{id:"description-2"},"Description:"),(0,i.kt)("p",null,"Allows the user to store a specific manifest through the cid of a manifest."),(0,i.kt)("h3",{id:"previous-steps-2"},"Previous Steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Upload a manifest.")),(0,i.kt)("h3",{id:"steps-2"},"Steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Call the manifest/storage endpoint with the following request body:")),(0,i.kt)("h3",{id:"example-input-2"},"Example Input:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n   "seed": "//Bob"\n   "cid": "CIDTest1",\n   "pool_id": 1\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"seed: the seed of the storage account."),(0,i.kt)("li",{parentName:"ul"},"cid: the content identifier associated with the file uploaded."),(0,i.kt)("li",{parentName:"ul"},"pool_id: the pool identifier where the file is uploaded.")),(0,i.kt)("h3",{id:"example-output-2"},"Example Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n   "storage": "5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty",\n   "cid": "CIDTest1",\n   "pool_id": 1\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"storage: the account that's storing the file."),(0,i.kt)("li",{parentName:"ul"},"cid: the content identifier of the manifest being stored."),(0,i.kt)("li",{parentName:"ul"},"pool_id: the pool identifier where the file is uploaded.")),(0,i.kt)("h2",{id:"batch-store-manifest"},"Batch Store Manifest"),(0,i.kt)("h3",{id:"description-3"},"Description:"),(0,i.kt)("p",null,"Allows the user to store all the manifest he wants through the cids of those manifest."),(0,i.kt)("h3",{id:"previous-steps-3"},"Previous Steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Upload a manifest.")),(0,i.kt)("h3",{id:"steps-3"},"Steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Call the manifest/batch_storage endpoint with the following request body:")),(0,i.kt)("h3",{id:"example-input-3"},"Example Input:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n    "seed": "//Bob",\n    "pool_id": 1,\n    "cid": ["CIDTest1","CIDTest2"]\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"seed: the seed of the storage account."),(0,i.kt)("li",{parentName:"ul"},"cid: an array of the content identifiers associated with the files uploaded."),(0,i.kt)("li",{parentName:"ul"},"pool_id: the pool identifier where the file is uploaded.")),(0,i.kt)("h3",{id:"example-output-3"},"Example Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n   "storer": "5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty",\n   "cid": ["CIDTest1","CIDTest2"]\n   "pool_id": 1\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"storer: the account that's storing the file."),(0,i.kt)("li",{parentName:"ul"},"cid: an array of the content identifiers associated with the files uploaded."),(0,i.kt)("li",{parentName:"ul"},"pool_id: the pool identifier where the file is uploaded.")),(0,i.kt)("h2",{id:"get-available"},(0,i.kt)("strong",{parentName:"h2"},"Get Available")),(0,i.kt)("h3",{id:"description-4"},"Description:"),(0,i.kt)("p",null,"Fetches all the available manifests to be stored."),(0,i.kt)("h3",{id:"previous-steps-4"},"Previous Steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Upload a manifest.")),(0,i.kt)("h3",{id:"steps-4"},"Steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Call the manifest/available endpoint with the following request body:")),(0,i.kt)("h3",{id:"example-input-4"},"Example Input:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n   "pool_id": 1\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"pool_id: the pool identifier where the file is uploaded.")),(0,i.kt)("h3",{id:"example-output-4"},"Example Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n   "manifests": [\n       {\n           "pool_id": 1,\n           "manifest_data": {\n               "manifest_metadata": {\n                   "job": {\n                       "engine": "IPFS",\n                       "uri": "CIDTest1",\n                       "work": "Storage"\n                   }\n               }\n           },\n           "replication_available": 1\n       }\n   ]\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"manifests: an array of all the manifest that are available to be stored in that pool.")),(0,i.kt)("h2",{id:"get-all"},(0,i.kt)("strong",{parentName:"h2"},"Get All")),(0,i.kt)("h3",{id:"description-5"},"Description:"),(0,i.kt)("p",null,"Fetches all the manifest there are or those related to the parameters given as filter."),(0,i.kt)("h3",{id:"previous-steps-5"},"Previous Steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Upload a manifest.")),(0,i.kt)("h3",{id:"steps-5"},"Steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Call the manifest endpoint with the following request body:")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("em",{parentName:"p"},"Note: If you call the function with empty parameters: { }. This will bring all the manifest there are."))),(0,i.kt)("h3",{id:"example-input-5"},"Example Input:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n   "pool_id": 1,\n   "account":"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY"\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"pool_id: the pool identifier where the files are uploaded."),(0,i.kt)("li",{parentName:"ul"},"account: the account that uploaded the files.")),(0,i.kt)("h3",{id:"example-output-5"},"Example Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n    "manifests": [\n        {\n            "pool_id": 1,\n            "uploaders": [\n                {\n                    "uploader": "5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY",\n                    "storers": [],\n                    "replication_available": 2\n                }\n            ],\n            "manifest_metadata": {\n                "job": {\n                    "engine": "IPFS",\n                    "uri": "CIDTest1",\n                    "work": "Storage"\n                }\n            }\n        }\n    ]\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"manifests: an array of all the manifest that were fetch according to the parameters given.")),(0,i.kt)("h2",{id:"remove"},(0,i.kt)("strong",{parentName:"h2"},"Remove")),(0,i.kt)("h3",{id:"description-6"},"Description:"),(0,i.kt)("p",null,"The uploader or admin can remove a manifest from the pool."),(0,i.kt)("h3",{id:"previous-steps-6"},"Previous Steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Upload a manifest.")),(0,i.kt)("h3",{id:"steps-6"},"Steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Call the manifest/remove endpoint with the following request body:")),(0,i.kt)("h3",{id:"example-input-6"},"Example Input:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n   "seed": "//Alice",\n   "cid": "CIDTest1",\n   "pool_id": 1\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"seed: the seed of the account uploader."),(0,i.kt)("li",{parentName:"ul"},"cid: the content identifier of the manifest being removed."),(0,i.kt)("li",{parentName:"ul"},"pool_id: the pool identifier where the file is being removed.")),(0,i.kt)("h3",{id:"example-output-6"},"Example Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n   "uploader": "5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY",\n   "cid": "CIDTest1",\n   "pool_id": 1\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"uploader: the account of the file uploader."),(0,i.kt)("li",{parentName:"ul"},"cid: the content identifier of the manifest removed."),(0,i.kt)("li",{parentName:"ul"},"pool_id: the pool identifier where the file was removed.")),(0,i.kt)("h2",{id:"batch-remove"},"Batch ",(0,i.kt)("strong",{parentName:"h2"},"Remove")),(0,i.kt)("h3",{id:"description-7"},"Description:"),(0,i.kt)("p",null,"The uploader or admin can remove a manifest from the pool."),(0,i.kt)("h3",{id:"previous-steps-7"},"Previous Steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Upload a manifest.")),(0,i.kt)("h3",{id:"steps-7"},"Steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Call the manifest/batch_remove endpoint with the following request body:")),(0,i.kt)("h3",{id:"example-input-7"},"Example Input:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n    "seed": "//Alice",\n    "pool_id": [1,1],\n    "cid": ["CIDTest1","CIDTest2"]\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"seed: the seed of the storage account."),(0,i.kt)("li",{parentName:"ul"},"cid: an array of the content identifiers associated with manifest being removed."),(0,i.kt)("li",{parentName:"ul"},"pool_id: the pool identifier where the file is being removed.")),(0,i.kt)("h3",{id:"example-output-7"},"Example Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n   "uploader": "5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty",\n   "cid": ["CIDTest1","CIDTest2"],\n   "pool_id": [1,1],\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"uploader: the account of the file uploader."),(0,i.kt)("li",{parentName:"ul"},"cid: the array of content identifiers of the manifest removed."),(0,i.kt)("li",{parentName:"ul"},"pool_id: the pool identifier where the file was removed.")),(0,i.kt)("h2",{id:"remove-stored-manifest"},(0,i.kt)("strong",{parentName:"h2"},"Remove Stored Manifest")),(0,i.kt)("h3",{id:"description-8"},"Description:"),(0,i.kt)("p",null,"The storer can stop storing a given manifest"),(0,i.kt)("h3",{id:"previous-steps-8"},"Previous Steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Upload a manifest."),(0,i.kt)("li",{parentName:"ol"},"Store a manifest.")),(0,i.kt)("h3",{id:"steps-8"},"Steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Call the manifest/remove_storing_manifest endpoint with the following request body:")),(0,i.kt)("h3",{id:"example-input-8"},"Example Input:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n   "seed": "//Bob",\n   "cid": "CIDTest1",\n   "pool_id": 1\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"seed: the seed of the account storer."),(0,i.kt)("li",{parentName:"ul"},"cid: the content identifier of the manifest to no longer be stored."),(0,i.kt)("li",{parentName:"ul"},"pool_id: the pool identifier.")),(0,i.kt)("h3",{id:"example-output-8"},"Example Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n   "storer": "5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty",\n   "cid": "CIDTest1",\n   "pool_id": 1\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"storer: the account of the file storer."),(0,i.kt)("li",{parentName:"ul"},"cid: the content identifier of the manifest no longer being stored."),(0,i.kt)("li",{parentName:"ul"},"pool_id: the pool identifier.")),(0,i.kt)("h2",{id:"batch-remove-stored-manifest"},"Batch ",(0,i.kt)("strong",{parentName:"h2"},"Remove Stored Manifest")),(0,i.kt)("h3",{id:"description-9"},"Description:"),(0,i.kt)("p",null,"The storer can stop storing the given manifests"),(0,i.kt)("h3",{id:"previous-steps-9"},"Previous Steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Upload a manifest."),(0,i.kt)("li",{parentName:"ol"},"Store a manifest.")),(0,i.kt)("h3",{id:"steps-9"},"Steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Call the manifest/batch_remove_storing_manifest endpoint with the following request body:")),(0,i.kt)("h3",{id:"example-input-9"},"Example Input:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n   "seed": "//Bob",\n   "cid": ["CIDTest1","CIDTest2"]\n   "pool_id": 1\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"seed: the seed of the account storer."),(0,i.kt)("li",{parentName:"ul"},"cid: the array of content identifiers of the manifests to no longer be stored."),(0,i.kt)("li",{parentName:"ul"},"pool_id: the pool identifier.")),(0,i.kt)("h3",{id:"example-output-9"},"Example Output:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n   "storer": "5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty",\n   "cid": ["CIDTest1","CIDTest2"]\n   "pool_id": 1\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"storer: the account of the file storer."),(0,i.kt)("li",{parentName:"ul"},"cid: the array of content identifiers of the manifests no longer being stored."),(0,i.kt)("li",{parentName:"ul"},"pool_id: the pool identifier.")))}c.isMDXComponent=!0}}]);