"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7118],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=a.createContext({}),l=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=l(e.components);return a.createElement(d.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},i=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),i=l(t),f=r,h=i["".concat(d,".").concat(f)]||i[f]||p[f]||o;return t?a.createElement(h,s(s({ref:n},u),{},{components:t})):a.createElement(h,s({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=i;var c={};for(var d in n)hasOwnProperty.call(n,d)&&(c[d]=n[d]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var l=2;l<o;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}i.displayName="MDXCreateElement"},8700:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return d},metadata:function(){return l},toc:function(){return u},default:function(){return i}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),s=["components"],c={},d="Run Node",l={unversionedId:"blockchain/Services/RunNode",id:"blockchain/Services/RunNode",title:"Run Node",description:"This docuemnt explains how to run Fula nodes",source:"@site/docs/blockchain/Services/RunNode.md",sourceDirName:"blockchain/Services",slug:"/blockchain/Services/RunNode",permalink:"/blockchain/Services/RunNode",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Build Node",permalink:"/blockchain/Services/BuildNode"},next:{title:"Node API",permalink:"/blockchain/Services/NodeAPI"}},u=[{value:"Install Docker",id:"install-docker",children:[],level:2},{value:"Build the image",id:"build-the-image",children:[],level:2},{value:"Run as service",id:"run-as-service",children:[],level:2}],p={toc:u};function i(e){var n=e.components,c=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},p,c,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"run-node"},"Run Node"),(0,o.kt)("p",null,"This docuemnt explains how to run Fula nodes"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Requires a ",(0,o.kt)("a",{parentName:"li",href:"BuildNode"},"Build")," .")),(0,o.kt)("p",null,"At the moment two validator nodes are run and managed by Fula Governance Association and others cannot run validator nodes. You can still run non-validator nodes (instructions after the validator node)"),(0,o.kt)("hr",null),(0,o.kt)("h1",null,"Run Validator Nodes"),(0,o.kt)("p",null,"A minimum of two validator nodes is required for the network to run."),(0,o.kt)("p",null,"1) CREATION OF THE KEYS OF EACH VALIDATOR ACCOUNT (You need to do this steap twice at least):"),(0,o.kt)("p",null,"Note: For each validator node, we use the same password for Aura and Grandpa account, but the two validator nodes each have differnet passwords\t"),(0,o.kt)("p",null,"a) Generate the Aura Account"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"./target/release/sugarfunge-node key generate --scheme Sr25519 --password-interactive\n")),(0,o.kt)("p",null,"sample output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Secret phrase:     toe dust enhance uncover version polar ugly person sunset wrist swamp lawsuit\nNetwork ID:        substrate\nSecret seed:       0xf8a168f8d987dde4d48e055068f480ba64950173c9f58826effc3b7d9c699fb7\nPublic key (hex):  0x9cea935ffd8f8e72de04a1022e94fb80fc1e4c56e724e83cc995017f8735d40b\nAccount ID:        0x9cea935ffd8f8e72de04a1022e94fb80fc1e4c56e724e83cc995017f8735d40b\nPublic key (SS58): 5FcT1aGqnzvkq3gtp65CKz2qRBUTSUxUrmWkqAF8o9MCLHV1\nSS58 Address:      5FcT1aGqnzvkq3gtp65CKz2qRBUTSUxUrmWkqAF8o9MCLHV1\n")),(0,o.kt)("p",null,"b) Generate the Grandpa Account using the secret phrase of the Aura Account"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'./target/release/sugarfunge-node key inspect --password-interactive --scheme Ed25519 "toe dust enhance uncover version polar ugly person sunset wrist swamp lawsuit"\n')),(0,o.kt)("p",null,"sample output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Secret phrase:     toe dust enhance uncover version polar ugly person sunset wrist swamp lawsuit\nNetwork ID:        substrate\nSecret seed:       0xf8a168f8d987dde4d48e055068f480ba64950173c9f58826effc3b7d9c699fb7\nPublic key (hex):  0x629b9993ff8409b7a554e73272fd34fc8710a7ab7cc3a139850a283d1a451669\nAccount ID:        0x629b9993ff8409b7a554e73272fd34fc8710a7ab7cc3a139850a283d1a451669\nPublic key (SS58): 5EHzmmawH9HJPF6cEWeTcBLv8wHW43XUaVgypX462q8T1fbT\nSS58 Address:      5EHzmmawH9HJPF6cEWeTcBLv8wHW43XUaVgypX462q8T1fbT\n")),(0,o.kt)("p",null,"2) GENERATE THE NODE-KEY AND PEER-ID FOR EACH VALIDATOR ACCOUNT"),(0,o.kt)("p",null,"a) Generate a random node key and peer-id (run twice, once for each validator node)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"./target/release/sugarfunge-node key generate-node-key\n")),(0,o.kt)("p",null,"sample output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Peer-id: 12D3KooWC9nU1QzG8m3dZKSNqssmasdupLPhgu9adYe1h4ToBW7r\nkey: 4ac42a38b622dd9943c49ca9300000236406d35a43f0ce82eef556c1d81a4157\n")),(0,o.kt)("p",null,"b) Save the key as a file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'echo -n "4ac42a38b622dd9943c49ca9300000236406d35a43f0ce82eef556c1d81a4157" > user-one-key\n')),(0,o.kt)("p",null,"And the same for user-two-key"),(0,o.kt)("p",null,"c) Verify that the peer-id is correct using the node-key stored "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"./target/release/sugarfunge-node key inspect-node-key --file user-one-key\n")),(0,o.kt)("p",null,"output should be the peer id"),(0,o.kt)("p",null,"3) CREATION OF CHAINSPECS AND CHAINSPECSRAW"),(0,o.kt)("p",null,"a) Before generating the CustomSpec.json, in the file node/src/chain_spec add the Peer-id of each of the validators in the node_authorization of the Genesis Config"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo nano ./node/src/chain_spec.rs\n")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Replacing Peer-id in the file",src:t(5921).Z,width:"722",height:"582"})),(0,o.kt)("p",null,"a.2) Now you need to rebuild the project to apply the above change in release:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cd ..\n\nsudo rm ./sugarfunge-node\n\ngit clone https://github.com/functionland/sugarfunge-node.git\n\ncd sugarfunge-node\n\ncargo build --release\n")),(0,o.kt)("p",null,"b) Generate the CustomSpec.json"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"./target/release/sugarfunge-node build-spec --disable-default-bootnode --chain local > customSpec.json\n")),(0,o.kt)("p",null,"output: A file named customSpec.json is created in the same folder"),(0,o.kt)("p",null,"c) Make the necessary changes if desired: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo nano ./customSpec.json\n")),(0,o.kt)("p",null,"Change the default account of Alice and Bob for Custom Accounts (At the end of hte file under session>keys find Aura and grandpa for both accounts and change all occurances of those)"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Changing default accounts",src:t(7186).Z,width:"405",height:"615"})),(0,o.kt)("p",null,"Here is the official Fula customSpec.json file:\n",(0,o.kt)("a",{target:"_blank",href:t(6184).Z},"Fula official specs")),(0,o.kt)("p",null,"d) Once the changes to the CustomSpec.json have been made, generate the CustomSpecRaw.json"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"./target/release/sugarfunge-node build-spec --chain=customSpec.json --raw --disable-default-bootnode > customSpecRaw.json\n")),(0,o.kt)("p",null,"Here is the official Fula customSpecRaw.json file:\n",(0,o.kt)("a",{target:"_blank",href:t(4999).Z},"Fula official generated raw specs")),(0,o.kt)("p",null,"4) ADD THE KEYS TO THE KEYSTORE FOR EACH VALIDATOR: This is made so the Accounts can import and finished blocks if not added the accounts won't produce them"),(0,o.kt)("p",null,"a) Add the Aura Key (replace the key phrase with generated one in step 1):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'./target/release/sugarfunge-node key insert --base-path=.tmp/node01 --chain customSpecRaw.json --scheme Sr25519 --suri "toe dust enhance uncover version polar ugly person sunset wrist swamp lawsuit" --password-interactive --key-type aura\n')),(0,o.kt)("p",null,"b) Add the Grandpa Key (replace the key phrase with generated one in step 1):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'./target/release/sugarfunge-node key insert --base-path=.tmp/node01 --chain customSpecRaw.json --scheme Ed25519 --suri "toe dust enhance uncover version polar ugly person sunset wrist swamp lawsuit" --password-interactive --key-type gran\n')),(0,o.kt)("p",null,"Note: For other validators the following fields should be change accordingly:\n--base-path= .temp/node02\n--suri \u201c the corresponding secret phrase\u201d"),(0,o.kt)("p",null,"5) COMMANDS TO START THE NODES"),(0,o.kt)("p",null,"a) For the main validator node execute (replace the node-key with correct key of peer id):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cargo run --release -- --chain ./customSpecRaw.json --enable-offchain-indexing true --base-path=.tmp/node01 --port=30334 --ws-port 9944 --ws-external --rpc-cors=all --rpc-methods=Unsafe --rpc-external --validator --name MyNode01 --password-interactive --node-key=4ac42a38b622dd9943c49ca9300000236406d35a43f0ce82eef556c1d81a4157\n")),(0,o.kt)("p",null,"b) For the rest of validator nodes execute (replacing node-key with second peer id key and peerID after /p2p/ with the main node peer id) :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cargo run --release -- --chain ./customSpecRaw.json --enable-offchain-indexing true --base-path=.tmp/node02 --port=30335 --ws-port 9945 --ws-external --rpc-cors=all --rpc-methods=Unsafe --rpc-external --bootnodes /ip4/127.0.0.1/tcp/30334/p2p/12D3KooWC9nU1QzG8m3dZKSNqssmasdupLPhgu9adYe1h4ToBW7r --validator --name MyNode02 --password-interactive --node-key=5ed89682d5d0d2efd35f98a248b97cc1f6155e6af169719f3d54900d34a98a4a\n")),(0,o.kt)("p",null,"Note: For each of the commands the following fields should be change accordingly:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"--base-path = .temp/node02 or .temp/node03\n--port = To a port not used in other commands\n--ws-port = To a port not used in other commands\n--bootnodes = Update the last segment value to the peer-id of the main validator obtained in step 2\n--name = to the given name\n--node-key with the node key values obtained in step 2 for each account\n")),(0,o.kt)("h1",null,"Run Non-Validator Nodes"),(0,o.kt)("p",null,"To add new nodes to the network that are not authorized:"),(0,o.kt)("p",null,"1) GENERATE THE NODE-KEY AND PEER-ID FOR THE USER-THREE"),(0,o.kt)("p",null,"a) Generate a random node key and peer-id "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"./target/release/sugarfunge-node key generate-node-key\n")),(0,o.kt)("p",null,"sample output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Peer-id: 12D3KooWF3MLTqgFRAKVqAdscdfZSSb9xXKFJ8paNEbtETKczUto\nkey: 239afb9dae01b5c010c454f1e1df64ce83b3e13803540df079677860a745d168\n")),(0,o.kt)("p",null,"b) Save the key as a file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'echo -n "239afb9dae01b5c010c454f1e1df64ce83b3e13803540df079677860a745d168" > user-three-key\n')),(0,o.kt)("p",null,"c) Verify that the peer-id is correct using the node-key stored "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"./target/release/sugarfunge-node key inspect-node-key --file user-three-key\n    \n")),(0,o.kt)("p",null,"2) START NODE COMMAND FOR THE NOT AUTHORIZE NODE"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cargo run --release -- --chain ./customSpecRaw.json --enable-offchain-indexing true --base-path=.tmp/node03 --port=30336 --ws-port 9946 --ws-external --rpc-cors=all --rpc-methods=Unsafe --rpc-external --name MyNode03 --node-key=239afb9dae01b5c010c454f1e1df64ce83b3e13803540df079677860a745d168 --offchain-worker always\n")),(0,o.kt)("p",null,"Note: For each of the commands the following fields should be change accordingly:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"--base-path = .temp/node02 or .temp/node03\n--port = To a port not used in other commands\n--ws-port = To a port not used in other commands\n--name = to the given name\n--node-key with the node key values obtained in step 2 for each account\n")),(0,o.kt)("p",null,"Here is the official Fula customSpecRaw.json file:\n",(0,o.kt)("a",{target:"_blank",href:t(4999).Z},"Fula official raw specs")),(0,o.kt)("hr",null),(0,o.kt)("h1",{id:"using-docker"},"Using Docker"),(0,o.kt)("h2",{id:"install-docker"},(0,o.kt)("a",{parentName:"h2",href:"https://docs.docker.com/engine/install/"},"Install Docker")),(0,o.kt)("h2",{id:"build-the-image"},"Build the image"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd sugarfunge-node\nsudo nano ./password1.txt\n")),(0,o.kt)("p",null,"Insert the password for node01. Redo the same for ./password2.txt and put the password for node2. Then:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker build -t sugarfunge-node:local -f docker/Dockerfile .\n")),(0,o.kt)("p",null,"Then you can run the node1 like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'docker run --rm -d --name MyNode01 --network host sugarfunge-node:local --chain /customSpecRaw.json --enable-offchain-indexing true --base-path=.tmp/node01 --port=30334 --ws-port 9944 --ws-external --rpc-cors=all --rpc-methods=Unsafe --rpc-external --validator --name MyNode01 --password-filename "/password1.txt" --node-key=2d...(the key)...a\n\ndocker run --rm -d --name MyNode02 --network host sugarfunge-node:local --chain ./customSpecRaw.json --enable-offchain-indexing true --base-path=.tmp/node02 --port=30335 --ws-port 9945 --ws-external --rpc-cors=all --rpc-methods=Unsafe --rpc-external --bootnodes /ip4/127.0.0.1/tcp/30334/p2p/(peerId of first node) --validator --name MyNode02 --password-filename "/password2.txt" --node-key=5...(key to node).....1\n')),(0,o.kt)("h2",{id:"run-as-service"},"Run as service"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano /etc/systemd/system/docker-sugarfunge-node1.service\n")),(0,o.kt)("p",null,"And insert:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'[Unit]\nDescription=Docker Sugarfunge Node 1\nAfter=docker.service\nRequires=docker.service\n\n[Service]\nTimeoutStartSec=0\nType=simple\nExecStart=/usr/bin/docker run --rm --name MyNode01 --network host sugarfunge-node:local --chain /customSpecRaw.json --enable-offchain-indexing true --base-path=.tmp/node01 --port=30334 --ws-port 9944 --ws-external --rpc-cors=all --rpc-methods=Unsafe --rpc-external --validator --name MyNode01 --password-filename "/password1.txt" --node-key=2d...(the key)...a\nExecStop=/usr/bin/docker stop MyNode01\nRestart=always\nStandardOutput=file:/var/log/MyNode01.log\nStandardError=file:/var/log/MyNode01.err\n\n[Install]\nWantedBy=multi-user.target\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano /etc/systemd/system/docker-sugarfunge-node2.service\n")),(0,o.kt)("p",null,"And insert:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'[Unit]\nDescription=Docker Sugarfunge Node 2\nAfter=docker.service\nRequires=docker.service\n\n[Service]\nTimeoutStartSec=0\nType=simple\nExecStart=/usr/bin/docker run --rm --name MyNode02 --network host sugarfunge-node:local --chain ./customSpecRaw.json --enable-offchain-indexing true --base-path=.tmp/node02 --port=30335 --ws-port 9945 --ws-external --rpc-cors=all --rpc-methods=Unsafe --rpc-external --bootnodes /ip4/127.0.0.1/tcp/30334/p2p/(peerId of first node) --validator --name MyNode02 --password-filename "/password2.txt" --node-key=5...(key to node).....1\nExecStop=/usr/bin/docker stop MyNode02\nRestart=always\nStandardOutput=file:/var/log/MyNode02.log\nStandardError=file:/var/log/MyNode02.err\n\n[Install]\nWantedBy=multi-user.target\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl daemon-reload\nsystemctl enable docker-sugarfunge-node1.service\nsystemctl enable docker-sugarfunge-node2.service\nsystemctl start docker-sugarfunge-node1.service\nsystemctl start docker-sugarfunge-node2.service\n")))}i.isMDXComponent=!0},6184:function(e,n,t){n.Z=t.p+"assets/files/customSpec-e217afec3644b11a00a3a27469378285.json"},4999:function(e,n,t){n.Z=t.p+"assets/files/customSpecRaw-1ffde72f187dbedc4cad33c0036b702f.json"},5921:function(e,n,t){n.Z=t.p+"assets/images/validatorNode1-0a35cba37e32b7adf66a2ead3dd0185a.png"},7186:function(e,n,t){n.Z=t.p+"assets/images/validatorNode2-32750edd686d26b8bdf614c10b64f13d.png"}}]);